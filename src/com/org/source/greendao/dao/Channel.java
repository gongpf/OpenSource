package com.org.source.greendao.dao;

import java.util.List;
import com.org.source.greendao.dao.DaoSession;
import com.org.source.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CHANNEL.
 */
public class Channel {

    private Long id;
    /** Not-null value. */
    private String name;
    private Short status;
    private Boolean is_fixed;
    private Boolean is_subscribed;
    private Short show_type;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ChannelDao myDao;

    private List<Article> articles;

    public Channel() {
    }

    public Channel(Long id) {
        this.id = id;
    }

    public Channel(Long id, String name, Short status, Boolean is_fixed, Boolean is_subscribed, Short show_type) {
        this.id = id;
        this.name = name;
        this.status = status;
        this.is_fixed = is_fixed;
        this.is_subscribed = is_subscribed;
        this.show_type = show_type;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChannelDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Short getStatus() {
        return status;
    }

    public void setStatus(Short status) {
        this.status = status;
    }

    public Boolean getIs_fixed() {
        return is_fixed;
    }

    public void setIs_fixed(Boolean is_fixed) {
        this.is_fixed = is_fixed;
    }

    public Boolean getIs_subscribed() {
        return is_subscribed;
    }

    public void setIs_subscribed(Boolean is_subscribed) {
        this.is_subscribed = is_subscribed;
    }

    public Short getShow_type() {
        return show_type;
    }

    public void setShow_type(Short show_type) {
        this.show_type = show_type;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Article> getArticles() {
        if (articles == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArticleDao targetDao = daoSession.getArticleDao();
            List<Article> articlesNew = targetDao._queryChannel_Articles(id);
            synchronized (this) {
                if(articles == null) {
                    articles = articlesNew;
                }
            }
        }
        return articles;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetArticles() {
        articles = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
