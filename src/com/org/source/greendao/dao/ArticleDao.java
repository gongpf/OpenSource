package com.org.source.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.org.source.greendao.AbstractDao;
import com.org.source.greendao.Property;
import com.org.source.greendao.internal.DaoConfig;
import com.org.source.greendao.query.Query;
import com.org.source.greendao.query.QueryBuilder;

import com.org.source.greendao.dao.Article;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTICLE.
*/
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Attribute = new Property(1, String.class, "attribute", false, "ATTRIBUTE");
        public final static Property Comment_cnt = new Property(2, Short.class, "comment_cnt", false, "COMMENT_CNT");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Content_type = new Property(4, Short.class, "content_type", false, "CONTENT_TYPE");
        public final static Property Grab_time = new Property(5, String.class, "grab_time", false, "GRAB_TIME");
        public final static Property Cid = new Property(6, long.class, "cid", false, "CID");
        public final static Property Item_type = new Property(7, Short.class, "item_type", false, "ITEM_TYPE");
        public final static Property Matched_tag = new Property(8, String.class, "matched_tag", false, "MATCHED_TAG");
        public final static Property Oppose_cnt = new Property(9, Short.class, "oppose_cnt", false, "OPPOSE_CNT");
        public final static Property Original_url = new Property(10, String.class, "original_url", false, "ORIGINAL_URL");
        public final static Property Publish_time = new Property(11, String.class, "publish_time", false, "PUBLISH_TIME");
        public final static Property Reco_type = new Property(12, Short.class, "reco_type", false, "RECO_TYPE");
        public final static Property Recoid = new Property(13, Long.class, "recoid", false, "RECOID");
        public final static Property Site = new Property(14, String.class, "site", false, "SITE");
        public final static Property Source_name = new Property(15, String.class, "source_name", false, "SOURCE_NAME");
        public final static Property Summary = new Property(16, String.class, "summary", false, "SUMMARY");
        public final static Property Support_cnt = new Property(17, Short.class, "support_cnt", false, "SUPPORT_CNT");
        public final static Property Tags = new Property(18, String.class, "tags", false, "TAGS");
        public final static Property Title = new Property(19, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(20, String.class, "url", false, "URL");
        public final static Property Valid = new Property(21, Boolean.class, "valid", false, "VALID");
    };

    private DaoSession daoSession;

    private Query<Article> channel_ArticlesQuery;

    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ATTRIBUTE' TEXT," + // 1: attribute
                "'COMMENT_CNT' INTEGER," + // 2: comment_cnt
                "'CONTENT' TEXT," + // 3: content
                "'CONTENT_TYPE' INTEGER," + // 4: content_type
                "'GRAB_TIME' TEXT," + // 5: grab_time
                "'CID' INTEGER NOT NULL ," + // 6: cid
                "'ITEM_TYPE' INTEGER," + // 7: item_type
                "'MATCHED_TAG' TEXT," + // 8: matched_tag
                "'OPPOSE_CNT' INTEGER," + // 9: oppose_cnt
                "'ORIGINAL_URL' TEXT," + // 10: original_url
                "'PUBLISH_TIME' TEXT," + // 11: publish_time
                "'RECO_TYPE' INTEGER," + // 12: reco_type
                "'RECOID' INTEGER," + // 13: recoid
                "'SITE' TEXT," + // 14: site
                "'SOURCE_NAME' TEXT," + // 15: source_name
                "'SUMMARY' TEXT," + // 16: summary
                "'SUPPORT_CNT' INTEGER," + // 17: support_cnt
                "'TAGS' TEXT," + // 18: tags
                "'TITLE' TEXT," + // 19: title
                "'URL' TEXT," + // 20: url
                "'VALID' INTEGER);"); // 21: valid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String attribute = entity.getAttribute();
        if (attribute != null) {
            stmt.bindString(2, attribute);
        }
 
        Short comment_cnt = entity.getComment_cnt();
        if (comment_cnt != null) {
            stmt.bindLong(3, comment_cnt);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        Short content_type = entity.getContent_type();
        if (content_type != null) {
            stmt.bindLong(5, content_type);
        }
 
        String grab_time = entity.getGrab_time();
        if (grab_time != null) {
            stmt.bindString(6, grab_time);
        }
        stmt.bindLong(7, entity.getCid());
 
        Short item_type = entity.getItem_type();
        if (item_type != null) {
            stmt.bindLong(8, item_type);
        }
 
        String matched_tag = entity.getMatched_tag();
        if (matched_tag != null) {
            stmt.bindString(9, matched_tag);
        }
 
        Short oppose_cnt = entity.getOppose_cnt();
        if (oppose_cnt != null) {
            stmt.bindLong(10, oppose_cnt);
        }
 
        String original_url = entity.getOriginal_url();
        if (original_url != null) {
            stmt.bindString(11, original_url);
        }
 
        String publish_time = entity.getPublish_time();
        if (publish_time != null) {
            stmt.bindString(12, publish_time);
        }
 
        Short reco_type = entity.getReco_type();
        if (reco_type != null) {
            stmt.bindLong(13, reco_type);
        }
 
        Long recoid = entity.getRecoid();
        if (recoid != null) {
            stmt.bindLong(14, recoid);
        }
 
        String site = entity.getSite();
        if (site != null) {
            stmt.bindString(15, site);
        }
 
        String source_name = entity.getSource_name();
        if (source_name != null) {
            stmt.bindString(16, source_name);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(17, summary);
        }
 
        Short support_cnt = entity.getSupport_cnt();
        if (support_cnt != null) {
            stmt.bindLong(18, support_cnt);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(19, tags);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(20, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(21, url);
        }
 
        Boolean valid = entity.getValid();
        if (valid != null) {
            stmt.bindLong(22, valid ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(Article entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // attribute
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2), // comment_cnt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4), // content_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // grab_time
            cursor.getLong(offset + 6), // cid
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7), // item_type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // matched_tag
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9), // oppose_cnt
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // original_url
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // publish_time
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12), // reco_type
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // recoid
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // site
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // source_name
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // summary
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17), // support_cnt
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // tags
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // title
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // url
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0 // valid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAttribute(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComment_cnt(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent_type(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4));
        entity.setGrab_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCid(cursor.getLong(offset + 6));
        entity.setItem_type(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7));
        entity.setMatched_tag(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOppose_cnt(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9));
        entity.setOriginal_url(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPublish_time(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setReco_type(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12));
        entity.setRecoid(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setSite(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSource_name(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSummary(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSupport_cnt(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17));
        entity.setTags(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTitle(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setUrl(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setValid(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Article entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "articles" to-many relationship of Channel. */
    public List<Article> _queryChannel_Articles(long cid) {
        synchronized (this) {
            if (channel_ArticlesQuery == null) {
                QueryBuilder<Article> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Cid.eq(null));
                channel_ArticlesQuery = queryBuilder.build();
            }
        }
        Query<Article> query = channel_ArticlesQuery.forCurrentThread();
        query.setParameter(0, cid);
        return query.list();
    }

}
