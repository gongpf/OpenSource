package com.org.source.sm.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.org.source.greendao.AbstractDao;
import com.org.source.greendao.Property;
import com.org.source.greendao.internal.DaoConfig;

import com.org.source.sm.model.Channel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHANNEL.
*/
public class ChannelDao extends AbstractDao<Channel, Long> {

    public static final String TABLENAME = "CHANNEL";

    /**
     * Properties of entity Channel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Status = new Property(2, Short.class, "status", false, "STATUS");
        public final static Property Is_fixed = new Property(3, Boolean.class, "is_fixed", false, "IS_FIXED");
        public final static Property Is_subscribed = new Property(4, Boolean.class, "is_subscribed", false, "IS_SUBSCRIBED");
        public final static Property Show_type = new Property(5, Short.class, "show_type", false, "SHOW_TYPE");
    };


    public ChannelDao(DaoConfig config) {
        super(config);
    }
    
    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHANNEL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'STATUS' INTEGER," + // 2: status
                "'IS_FIXED' INTEGER," + // 3: is_fixed
                "'IS_SUBSCRIBED' INTEGER," + // 4: is_subscribed
                "'SHOW_TYPE' INTEGER);"); // 5: show_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHANNEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Channel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Short status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(3, status);
        }
 
        Boolean is_fixed = entity.getIs_fixed();
        if (is_fixed != null) {
            stmt.bindLong(4, is_fixed ? 1l: 0l);
        }
 
        Boolean is_subscribed = entity.getIs_subscribed();
        if (is_subscribed != null) {
            stmt.bindLong(5, is_subscribed ? 1l: 0l);
        }
 
        Short show_type = entity.getShow_type();
        if (show_type != null) {
            stmt.bindLong(6, show_type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Channel readEntity(Cursor cursor, int offset) {
        Channel entity = new Channel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // is_fixed
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // is_subscribed
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) // show_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Channel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2));
        entity.setIs_fixed(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIs_subscribed(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setShow_type(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Channel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Channel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
