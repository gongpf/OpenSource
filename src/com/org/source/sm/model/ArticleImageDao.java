package com.org.source.sm.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.org.source.greendao.AbstractDao;
import com.org.source.greendao.Property;
import com.org.source.greendao.internal.DaoConfig;
import com.org.source.greendao.query.Query;
import com.org.source.greendao.query.QueryBuilder;

import com.org.source.sm.model.ArticleImage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTICLE_IMAGE.
*/
public class ArticleImageDao extends AbstractDao<ArticleImage, Long> {

    public static final String TABLENAME = "ARTICLE_IMAGE";

    /**
     * Properties of entity ArticleImage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Index = new Property(2, Short.class, "index", false, "INDEX");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Width = new Property(4, Short.class, "width", false, "WIDTH");
        public final static Property Height = new Property(5, Short.class, "height", false, "HEIGHT");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
        public final static Property Gallery_id = new Property(8, String.class, "gallery_id", false, "GALLERY_ID");
        public final static Property Gallery_type = new Property(9, Short.class, "gallery_type", false, "GALLERY_TYPE");
        public final static Property Aid = new Property(10, String.class, "aid", false, "AID");
    };

    private Query<ArticleImage> article_ImageQuery;

    public ArticleImageDao(DaoConfig config) {
        super(config);
    }
    
    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICLE_IMAGE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'INDEX' INTEGER," + // 2: index
                "'DESCRIPTION' TEXT," + // 3: description
                "'WIDTH' INTEGER," + // 4: width
                "'HEIGHT' INTEGER," + // 5: height
                "'TYPE' TEXT," + // 6: type
                "'URL' TEXT," + // 7: url
                "'GALLERY_ID' TEXT," + // 8: gallery_id
                "'GALLERY_TYPE' INTEGER," + // 9: gallery_type
                "'AID' TEXT NOT NULL );"); // 10: aid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICLE_IMAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ArticleImage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        Short index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(3, index);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        Short width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(5, width);
        }
 
        Short height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(6, height);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
 
        String gallery_id = entity.getGallery_id();
        if (gallery_id != null) {
            stmt.bindString(9, gallery_id);
        }
 
        Short gallery_type = entity.getGallery_type();
        if (gallery_type != null) {
            stmt.bindLong(10, gallery_type);
        }
        stmt.bindString(11, entity.getAid());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ArticleImage readEntity(Cursor cursor, int offset) {
        ArticleImage entity = new ArticleImage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2), // index
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4), // width
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5), // height
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // gallery_id
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9), // gallery_type
            cursor.getString(offset + 10) // aid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ArticleImage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIndex(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWidth(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4));
        entity.setHeight(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGallery_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGallery_type(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9));
        entity.setAid(cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ArticleImage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ArticleImage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "image" to-many relationship of Article. */
    public List<ArticleImage> _queryArticle_Image(String aid) {
        synchronized (this) {
            if (article_ImageQuery == null) {
                QueryBuilder<ArticleImage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Aid.eq(null));
                article_ImageQuery = queryBuilder.build();
            }
        }
        Query<ArticleImage> query = article_ImageQuery.forCurrentThread();
        query.setParameter(0, aid);
        return query.list();
    }

}
